{"mappings":"AAAA,MAAMA,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,MAAOH,SAASC,cAAc,uBAC9BG,OAAQJ,SAASC,cAAc,wBA6DjC,MAAMI,EAAQ,IA1Dd,MASEC,OACE,MAAMC,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,GAGdR,QACE,GAAIS,KAAKG,SACP,OAGF,MAAMC,EAAYC,KAAKC,MACvBN,KAAKG,UAAW,EAEhBH,KAAKO,WAAaC,aAAY,KAC5B,MACMC,EADcJ,KAAKC,MACOF,EAC1BL,EAAOC,KAAKC,kBAAkBQ,GAEpCT,KAAKE,OAAOH,KACX,KAGLL,OACEgB,cAAcV,KAAKO,YACnBP,KAAKG,UAAW,EAChB,MAAMJ,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,GAGdJ,QACEe,cAAcV,KAAKO,YACnBP,KAAKG,UAAW,EAGlBF,kBAAkBF,GAOhB,MAAO,C,MANOC,KAAKW,IACjBC,KAAKC,MAAMd,EAAS,MAAyB,O,KAElCC,KAAKW,IAAIC,KAAKC,MAAMd,EAAS,KAAoB,M,KACjDC,KAAKW,IAAIC,KAAKC,MAAMd,EAAS,IAAc,OAK1DY,IAAIG,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KArDnCC,aAAYf,OAAEA,IACZF,KAAKO,WAAa,KAClBP,KAAKG,UAAW,EAChBH,KAAKE,OAASA,EAEdF,KAAKF,SAoDe,CACtBI,OASF,UAAyBgB,MAAEA,EAAKC,KAAEA,EAAIC,KAAEA,IACtC9B,EAAKM,OAAOyB,YAAc,GAAGH,KAASC,KAAQC,OAPhDE,QAAQC,IAAI1B,GAEZP,EAAKC,MAAMiC,iBAAiB,QAAS3B,EAAMN,MAAMkC,KAAK5B,IACtDP,EAAKI,KAAK8B,iBAAiB,QAAS3B,EAAMH,KAAK+B,KAAK5B,IACpDP,EAAKK,MAAM6B,iBAAiB,QAAS3B,EAAMF,MAAM8B,KAAK5B","sources":["src/index.js"],"sourcesContent":["const refs = {\n  start: document.querySelector('[data-action-start]'),\n  stop: document.querySelector('[data-action-stop]'),\n  pause: document.querySelector('[data-action-pause]'),\n  output: document.querySelector('[data-action-timer]'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n\n    this.init();\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n\n    const startTime = Date.now();\n    this.isActive = true;\n\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.getTimeComponents(deltaTime);\n\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  pause() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n  }\n\n  getTimeComponents(time) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({\n  onTick: updateClockface,\n});\n\nconsole.log(timer);\n\nrefs.start.addEventListener('click', timer.start.bind(timer));\nrefs.stop.addEventListener('click', timer.stop.bind(timer));\nrefs.pause.addEventListener('click', timer.pause.bind(timer));\n\nfunction updateClockface({ hours, mins, secs }) {\n  refs.output.textContent = `${hours}:${mins}:${secs}`;\n}\n"],"names":["$1f0dc3b9307be026$var$refs","start","document","querySelector","stop","pause","output","$1f0dc3b9307be026$var$timer","init","time","this","getTimeComponents","onTick","isActive","startTime","Date","now","intervalId","setInterval","deltaTime","clearInterval","pad","Math","floor","value","String","padStart","constructor","hours","mins","secs","textContent","console","log","addEventListener","bind"],"version":3,"file":"index.2f71f452.js.map"}